#
# This file is part of the Boomerang Decompiler.
#
# See the file "LICENSE.TERMS" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL
# WARRANTIES.
#

# This file contains a semantic description of the SPARC V8 processor.

ENDIANNESS BIG;

WORD := 4; # number of bytes
MAX_BYTE := 0xFF;

#
# registers
#
INTEGER %g0[32] -> 0;
INTEGER %g1[32] -> 1;
INTEGER %g2[32] -> 2;
INTEGER %g3[32] -> 3;
INTEGER %g4[32] -> 4;
INTEGER %g5[32] -> 5;
INTEGER %g6[32] -> 6;
INTEGER %g7[32] -> 7;

INTEGER %o0[32] -> 8;
INTEGER %o1[32] -> 9;
INTEGER %o2[32] -> 10;
INTEGER %o3[32] -> 11;
INTEGER %o4[32] -> 12;
INTEGER %o5[32] -> 13;
INTEGER %o6[32] -> 14;
INTEGER %o7[32] -> 15;

INTEGER %l0[32] -> 16;
INTEGER %l1[32] -> 17;
INTEGER %l2[32] -> 18;
INTEGER %l3[32] -> 19;
INTEGER %l4[32] -> 20;
INTEGER %l5[32] -> 21;
INTEGER %l6[32] -> 22;
INTEGER %l7[32] -> 23;

INTEGER %i0[32] -> 24;
INTEGER %i1[32] -> 25;
INTEGER %i2[32] -> 26;
INTEGER %i3[32] -> 27;
INTEGER %i4[32] -> 28;
INTEGER %i5[32] -> 29;
INTEGER %i6[32] -> 30;
INTEGER %i7[32] -> 31;

# Aliases
INTEGER %sp[32] -> 14;
INTEGER %fp[32] -> 30;

# Float regs
FLOAT %f0[32] -> 32;
FLOAT %f1[32] -> 33;
FLOAT %f2[32] -> 34;
FLOAT %f3[32] -> 35;
FLOAT %f4[32] -> 36;
FLOAT %f5[32] -> 37;
FLOAT %f6[32] -> 38;
FLOAT %f7[32] -> 39;

FLOAT %f8[32] -> 40;
FLOAT %f9[32] -> 41;
FLOAT %f10[32] -> 42;
FLOAT %f11[32] -> 43;
FLOAT %f12[32] -> 44;
FLOAT %f13[32] -> 45;
FLOAT %f14[32] -> 46;
FLOAT %f15[32] -> 47;

FLOAT %f16[32] -> 48;
FLOAT %f17[32] -> 49;
FLOAT %f18[32] -> 50;
FLOAT %f19[32] -> 51;
FLOAT %f20[32] -> 52;
FLOAT %f21[32] -> 53;
FLOAT %f22[32] -> 54;
FLOAT %f23[32] -> 55;

FLOAT %f24[32] -> 56;
FLOAT %f25[32] -> 57;
FLOAT %f26[32] -> 58;
FLOAT %f27[32] -> 59;
FLOAT %f28[32] -> 60;
FLOAT %f29[32] -> 61;
FLOAT %f30[32] -> 62;
FLOAT %f31[32] -> 63;

FLOAT %f0to1[64]   -> 64 COVERS %f0..%f1;
FLOAT %f2to3[64]   -> 65 COVERS %f2..%f3;
FLOAT %f4to5[64]   -> 66 COVERS %f4..%f5;
FLOAT %f6to7[64]   -> 67 COVERS %f6..%f7;
FLOAT %f8to9[64]   -> 68 COVERS %f8..%f9;
FLOAT %f10to11[64] -> 69 COVERS %f10..%f11;
FLOAT %f12to13[64] -> 70 COVERS %f12..%f13;
FLOAT %f14to15[64] -> 71 COVERS %f14..%f15;
FLOAT %f16to17[64] -> 72 COVERS %f16..%f17;
FLOAT %f18to19[64] -> 73 COVERS %f18..%f19;
FLOAT %f20to21[64] -> 74 COVERS %f20..%f21;
FLOAT %f22to23[64] -> 75 COVERS %f22..%f23;
FLOAT %f24to25[64] -> 76 COVERS %f24..%f25;
FLOAT %f26to27[64] -> 77 COVERS %f26..%f27;
FLOAT %f28to29[64] -> 78 COVERS %f28..%f29;
FLOAT %f30to31[64] -> 79 COVERS %f30..%f31;

FLOAT %f0to3[128]  -> 80 COVERS %f0..%f3;
FLOAT %f4to7[128]  -> 81 COVERS %f4..%f7;
FLOAT %f8to11[128] -> 82 COVERS %f8..%f11;
FLOAT %f12to15[128]-> 83 COVERS %f12..%f15;
FLOAT %f16to19[128]-> 84 COVERS %f16..%f19;
FLOAT %f20to23[128]-> 85 COVERS %f20..%f23;
FLOAT %f24to27[128]-> 86 COVERS %f24..%f27;
FLOAT %f28to31[128]-> 87 COVERS %f28..%f31;

# control regs
INTEGER %pc[32]  -> -1;
INTEGER %npc[32] -> -1;

INTEGER %Y[32]   -> 100;
INTEGER %CWP[32] -> 101;
INTEGER %TBR[32] -> 102;
INTEGER %WIM[32] -> 103;
INTEGER %PSR[32] -> 104;
INTEGER %FSR[32] -> 105;

# Standard flags
FLAGS %icc[4] -> 200 SHARES %PSR@[20..23];
FLAGS %CF[1] -> -1 SHARES %icc@[0..0];
FLAGS %OF[1] -> -1 SHARES %icc@[1..1];
FLAGS %ZF[1] -> -1 SHARES %icc@[2..2];
FLAGS %NF[1] -> -1 SHARES %icc@[3..3];

# Floating point flags
INTEGER %FZF[1] -> -1;
INTEGER %FLF[1] -> -1;
INTEGER %FGF[1] -> -1;

INTEGER %CTI[1] -> -1;


LOGICALFLAGS(op1)   {
    *1*  %NF := op1@[31:31]
    *1*  %ZF := [op1 = 0 ? 1 : 0]
    *1*  %OF := 0
    *1*  %CF := 0
};

ADDFLAGS(op1, op2, result)  {
    *1*  %NF := result@[31:31]
    *1*  %ZF := [result = 0 ? 1 : 0]
    *1*  %OF := ((op1@[31:31]) & (op2@[31:31]) & ~(result@[31:31])) |
            (~(op1@[31:31]) & ~(op2@[31:31]) & (result@[31:31]))
    *1*  %CF := ((op1@[31:31]) & (op2@[31:31])) |
            (~(result@[31:31]) & ((op1@[31:31]) | (op2@[31:31])))
};

TADDFLAGS(op1, op2, result) {
    *1*  %NF := result@[31:31]
    *1*  %ZF := [result = 0 ? 1 : 0]
#   *1*  %OF := temp_v
    *1*  %CF := ((op1@[31:31]) & (op2@[31:31])) |
            (~(result@[31:31]) & ((op1@[31:31]) | (op2@[31:31])))
};

SUBFLAGS(op1, op2, result)  {
    *1*  %NF := result@[31:31]
    *1*  %ZF := [result = 0 ? 1 : 0]
    *1*  %OF := ((op1@[31:31]) & ~(op2@[31:31]) & ~(result@[31:31])) |
            (~(op1@[31:31]) & (op2@[31:31]) & (result@[31:31]))
    *1*  %CF := (~(op1@[31:31]) & (op2@[31:31])) |
            ((result@[31:31]) & (~(op1@[31:31]) | (op2@[31:31])))
};

TSUBFLAGS(op1, op2, result) {
    *1*  %NF := result@[31:31]
    *1*  %ZF := [result = 0 ? 1 : 0]
#   *1*  %OF := temp_v
    *1*  %CF := (~(op1@[31:31]) & (op2@[31:31])) |
            ((result@[31:31]) & (~(op1@[31:31]) | (op2@[31:31])))
};

# MVE: These are correct only for a 32 bit result; usually result is 64 bits
MULTFLAGS(op1, op2, result) {
    *1*  %NF := result@[31:31]
    *1*  %ZF := [result = 0 ? 1 : 0]
    *1*  %OF := 0
    *1*  %CF := 0
};

MULTSFLAGS(op1, op2, result){
    *1*  %NF := result@[31:31]
    *1*  %ZF := [result = 0 ? 1 : 0]
    *1*  %OF := ((op1@[31:31]) & (op2@[31:31]) & ~(result@[31:31])) |
            (~(op1@[31:31]) & ~(op2@[31:31]) & (result@[31:31]))
    *1*  %CF := ((op1@[31:31]) & (op2@[31:31])) |
            (~(result@[31:31]) & ((op1@[31:31]) | (op2@[31:31])))
};

DIVFLAGS(op1, op2, result)  {
    *1*  %NF := result@[31:31]
    *1*  %ZF := [result = 0 ? 1 : 0]
#   *1*  %OF := temp_v
    *1*  %CF := 0
};

SETFFLAGS(op1, op2) {
    *1* %FZF := [op1 = op2 ? 1 : 0]
    *1* %FLF := [op1 < op2 ? 1 : 0]
    *1* %FGF := [op1 > op2 ? 1 : 0]
};

# Note currently ignores cond
TRAP(cond, op1) {
    *32* %l1 := %pc
    *32* %l2 := %npc
    *32* %TBR@[4:11] := op1
    *1*  %PSR@[7:7] := 1
    *32* %pc := %TBR
    *32* %npc := %TBR+4
};


#synthetic instructions
INSTRUCTION "MOV" (src, dest) { *32* dest := src };
INSTRUCTION "CMP" (rs1, reg_or_imm) { SUBFLAGS(rs1, reg_or_imm, rs1 - reg_or_imm) };


# Load double instruction-  the 1st reg. of double load must be even
# the 2nd reg. of double load must be the next reg. after 1st, hence odd.

INSTRUCTION "LDD" (src, rd) {
    *32*    rd       := src
    *32*    succ(rd) := m[addr(src) + WORD]
};

INSTRUCTION "LD"   (src, dest) { *32* dest := src };
INSTRUCTION "LDUH" (src, dest) { *32* dest := zfill(16, 32, src) };
INSTRUCTION "LDUB" (src, dest) { *32* dest := zfill( 8, 32, src) };
INSTRUCTION "LDSH" (src, dest) { *32* dest := sgnex(16, 32, src) };
INSTRUCTION "LDSB" (src, dest) { *32* dest := sgnex( 8, 32, src) };


# Store double instruction- the 1st reg. of double op. must be even
# the 2nd reg. of double op. must be the next reg. after 1st, hence odd
INSTRUCTION "STD" (rd, eaddr) {
    *32* m[eaddr] := rd
    *32* m[eaddr + WORD] := succ(rd)
};

INSTRUCTION "ST"  (src, dest) { *32* dest := src };
INSTRUCTION "STH" (src, dest) { *16* dest := truncs(32, 16, src) };
INSTRUCTION "STB" (src, dest) { *8*  dest := truncs(32, 8, src) };


# LOad STore Unsigned Byte
# the byte number given by address offset
# (1st 2 bytes of addr.) is selected by a shift
# the copied byte (in the source addr.) is replaced with 1's
INSTRUCTION "LDSTUB" (eaddr, rd) {
    *32*  rd       := zfill(8, 32, m[eaddr])
    *8*   m[eaddr] := m[eaddr] | MAX_BYTE
};


# Swap using temp register
INSTRUCTION "SWAP" (lhs, rhs) {
    *32* tmp1 := rhs
    *32* rhs := lhs
    *32* lhs := tmp1
};


INSTRUCTION "AND"    (rs1, reg_or_imm, rd) { *32* rd := rs1 & reg_or_imm };
INSTRUCTION "ANDCC"  (rs1, reg_or_imm, rd) { *32* rd := rs1 & reg_or_imm     LOGICALFLAGS(rs1 & reg_or_imm) };
INSTRUCTION "OR"     (rs1, reg_or_imm, rd) { *32* rd := rs1 | reg_or_imm };
INSTRUCTION "ORCC"   (rs1, reg_or_imm, rd) { *32* rd := rs1 | reg_or_imm     LOGICALFLAGS(rs1 | reg_or_imm) };
INSTRUCTION "XOR"    (rs1, reg_or_imm, rd) { *32* rd := rs1 ^ reg_or_imm };
INSTRUCTION "XORCC"  (rs1, reg_or_imm, rd) { *32* rd := rs1 ^ reg_or_imm     LOGICALFLAGS(rs1 ^ reg_or_imm) };

INSTRUCTION "ANDN"   (rs1, reg_or_imm, rd) { *32* rd := rs1 & (~reg_or_imm) };
INSTRUCTION "ANDNCC" (rs1, reg_or_imm, rd) { *32* rd := rs1 & (~reg_or_imm)  LOGICALFLAGS(rs1 & (~reg_or_imm)) };
INSTRUCTION "ORN"    (rs1, reg_or_imm, rd) { *32* rd := rs1 | (~reg_or_imm) };
INSTRUCTION "ORNCC"  (rs1, reg_or_imm, rd) { *32* rd := rs1 | (~reg_or_imm)  LOGICALFLAGS(rs1 | (~reg_or_imm)) };
INSTRUCTION "XNOR"   (rs1, reg_or_imm, rd) { *32* rd := rs1 ^ (~reg_or_imm) };
INSTRUCTION "XNORCC" (rs1, reg_or_imm, rd) { *32* rd := rs1 ^ (~reg_or_imm)  LOGICALFLAGS(rs1 ^ (~reg_or_imm)) };


# sethi instruction- puts the immediate into the top 22 bits
INSTRUCTION "SETHI"  (val, rd) { *32* rd := val << 10 };

INSTRUCTION "NOP" () { _ };

INSTRUCTION "FLUSH" (eaddr) { _ }; # icache flush
INSTRUCTION "STBAR" ()      { _ }; # store barrier

INSTRUCTION "SLL" (rs1, reg_or_imm, rd) { *32* rd := rs1 <<  reg_or_imm };
INSTRUCTION "SRL" (rs1, reg_or_imm, rd) { *32* rd := rs1 >>  reg_or_imm };
INSTRUCTION "SRA" (rs1, reg_or_imm, rd) { *32* rd := rs1 >>A reg_or_imm };


# NOTE: The format of these (number of RTLs, etc) must agree with the
# isCompare function in rtl/ctisparc.cc.
INSTRUCTION "ADD"    (rs1, reg_or_imm, rd) { *32* tmp := rs1     *32* rd := rs1 + reg_or_imm };
INSTRUCTION "ADDCC"  (rs1, reg_or_imm, rd) { *32* tmp := rs1     *32* rd := rs1 + reg_or_imm     ADDFLAGS(tmp, reg_or_imm, rd) };
INSTRUCTION "SUB"    (rs1, reg_or_imm, rd) { *32* tmp := rs1     *32* rd := rs1 - reg_or_imm };
INSTRUCTION "SUBCC"  (rs1, reg_or_imm, rd) { *32* tmp := rs1     *32* rd := rs1 - reg_or_imm     SUBFLAGS(tmp, reg_or_imm, rd) };
INSTRUCTION "TADDCC" (rs1, reg_or_imm, rd) { *32* tmp := rs1     *32* rd := rs1 + reg_or_imm     TADDFLAGS(tmp, reg_or_imm, rd) };
INSTRUCTION "TSUBCC" (rs1, reg_or_imm, rd) { *32* tmp := rs1     *32* rd := rs1 - reg_or_imm     TSUBFLAGS(tmp, reg_or_imm, rd) };

INSTRUCTION "ADDX"   (rs1, reg_or_imm, rd) { *32* tmp := rs1     *32* rd := rs1 + reg_or_imm + zfill(1,32,%CF) };
INSTRUCTION "ADDXCC" (rs1, reg_or_imm, rd) { *32* tmp := rs1     *32* rd := rs1 + reg_or_imm + zfill(1,32,%CF)   ADDFLAGS(tmp, reg_or_imm, rd) };
INSTRUCTION "SUBX"   (rs1, reg_or_imm, rd) { *32* tmp := rs1     *32* rd := (rs1 - reg_or_imm) - zfill(1,32,%CF) };
INSTRUCTION "SUBXCC" (rs1, reg_or_imm, rd) { *32* tmp := rs1     *32* rd := (rs1 - reg_or_imm) - zfill(1,32,%CF)   SUBFLAGS(tmp, reg_or_imm, rd) };


# Unsigned Multiplication - uses the Y register to store top 32 bits
# treats Y and rd as 64 bit register
UMULT   := { "UMUL", "UMULCC" };

INSTRUCTION UMULT[idx]  (rs1, reg_or_imm, rd) {
    *32* tmp := rs1
    *64* tmpl := zfill(32, 64, rs1) * zfill(32, 64, reg_or_imm)
    *32* rd := truncs(64, 32, tmpl)
    *32* %Y := tmpl@[32:63]
};

INSTRUCTION "UMULCC" (rs1, reg_or_imm, rd) { MULTFLAGS(tmp, reg_or_imm, rd) };

INSTRUCTION "MULSCC" (rs1, reg_or_imm, rd) {
    *32* tmp := (rs1 >> 1) | [(%NF^%OF) = 1 ? 1<<31 : 0]
    *32* tmp2 := [(%Y@[0:0] = 1) ? reg_or_imm : 0 ]
    *32* %Y := %Y >> 1 | (rs1 << 31)
    *32* rd := tmp + tmp2
    ADDFLAGS( tmp, tmp2, rd )
};


# Signed Multiplication - uses the Y register to store top 32 bits
# treats Y and rd as 64 bit register
SMULT   := { "SMUL", "SMULCC" };

INSTRUCTION SMULT[idx]  (rs1, reg_or_imm, rd) {
    *32* tmp := rs1
    *64* tmpl := sgnex(32, 64, rs1) *! sgnex(32, 64, reg_or_imm)
    *32* rd := truncs(64, 32, tmpl)
    *32* %Y := tmpl@[32:63]
};

INSTRUCTION "SMULCC" (rs1, reg_or_imm, rd) {
    MULTFLAGS(tmp, reg_or_imm, rd)
};

# Unsigned Multiplication Quick - 32 x 32 -> 32 bits
UMULTQ  := { "UMULQ", "UMULCCQ" };
INSTRUCTION UMULTQ[idx] (rs1, reg_or_imm, rd) { *32* rd := rs1 * reg_or_imm };
INSTRUCTION "UMULCCQ"   (rs1, reg_or_imm, rd) { MULTFLAGS(rs1, reg_or_imm, rd) };

# Signed Multiplication - 32 x 32 bits -> 32 bits
SMULTQ := { "SMULQ", "SMULCCQ" };
INSTRUCTION SMULTQ[idx]  (rs1, reg_or_imm, rd) { *32* rd := rs1 *! reg_or_imm };
INSTRUCTION "SMULCCQ"    (rs1, reg_or_imm, rd) { MULTFLAGS(rs1, reg_or_imm, rd) };


# Unsigned Division
# If overflow has occured give result highest value (all 1's)
# Note: in practice, overflow only happens when the numerator is 0x80000000
# and the divisor is -1
# For now, we don't model the behaviour with these inputs (too expensive)
UDIVS := { "UDIV", "UDIVCC" };
INSTRUCTION UDIVS[idx] (rs1, reg_or_imm, rd) {
    *64* tmpl := (zfill(32, 64, %Y) << 32) | zfill(32, 64, rs1)
    *32* rd := truncu(64, 32, tmpl / zfill(32, 64, reg_or_imm))
};
INSTRUCTION "UDIVCC" (rs1, reg_or_imm, rd) { DIVFLAGS(tmpl, reg_or_imm, rd) };

#
# Unsigned division: 32 / 32 bits -> 32 bits
#
UDIVSQ := { "UDIVQ", "UDIVCCQ" };
INSTRUCTION UDIVSQ[idx] (rs1, reg_or_imm, rd) { *32* rd := rs1 / reg_or_imm };
INSTRUCTION "UDIVCCQ"   (rs1, reg_or_imm, rd) { DIVFLAGS(rs1, reg_or_imm, rd) };


# Signed Division
# If no overflow or underflow then put value in result
# If overflow has occured give result highest value (neg. or positive)
# Note: in practice, overflow only happens when the numerator is 0x80000000
# and the divisor is -1
# For now, we don't model the behaviour with these inputs (too expensive)
SDIVS := { "SDIV", "SDIVCC" };
INSTRUCTION SDIVS[idx] (rs1, reg_or_imm, rd) {
    *64* tmpl := (zfill(32, 64, %Y) << 32) | zfill(32, 64, rs1)
    *32* rd := truncs(64, 32, tmpl /! sgnex(32, 64, reg_or_imm))
};
INSTRUCTION "SDIVCC" (rs1, reg_or_imm, rd) { DIVFLAGS(rs1, reg_or_imm, rd) };


SDIVSQ := { "SDIVQ", "SDIVCCQ" };
INSTRUCTION SDIVSQ[idx] (rs1, reg_or_imm, rd) { *32* rd := rs1 /! reg_or_imm  };
INSTRUCTION "SDIVCCQ"   (rs1, reg_or_imm, rd) { DIVFLAGS(rs1, reg_or_imm, rd) };

# Save instruction is machine-dependant (register windows)
# Note that these versions of save and restore are one possible implementation
# of the sparc spec (essentially number of windows = 1 & assume the window traps
# do what they're supposed to do).
INSTRUCTION "SAVE" (rs1, reg_or_imm, rd) {
    *32* tmp := rs1 + reg_or_imm
    *32* m[%sp+0]  := %l0
    *32* m[%sp+4]  := %l1
    *32* m[%sp+8]  := %l2
    *32* m[%sp+12] := %l3
    *32* m[%sp+16] := %l4
    *32* m[%sp+20] := %l5
    *32* m[%sp+24] := %l6
    *32* m[%sp+28] := %l7
    *32* m[%sp+32] := %i0
    *32* m[%sp+36] := %i1
    *32* m[%sp+40] := %i2
    *32* m[%sp+44] := %i3
    *32* m[%sp+48] := %i4
    *32* m[%sp+52] := %i5
    *32* m[%sp+56] := %i6
    *32* m[%sp+60] := %i7
    *32* %i0 := %o0
    *32* %i1 := %o1
    *32* %i2 := %o2
    *32* %i3 := %o3
    *32* %i4 := %o4
    *32* %i5 := %o5
    *32* %i6 := %o6
    *32* %i7 := %o7
    *32* rd := tmp
};

# Restore instruction is machine-dependent (register windows)
INSTRUCTION "RESTORE" (rs1, reg_or_imm, rd) {
    *32* tmp := rs1 + reg_or_imm
    *32* %o0 := %i0
    *32* %o1 := %i1
    *32* %o2 := %i2
    *32* %o3 := %i3
    *32* %o4 := %i4
    *32* %o5 := %i5
    *32* %o6 := %i6
    *32* %o7 := %i7
    *32* rd := tmp # for rd==sp
    *32* %l0 := m[%sp+0]
    *32* %l1 := m[%sp+4]
    *32* %l2 := m[%sp+8]
    *32* %l3 := m[%sp+12]
    *32* %l4 := m[%sp+16]
    *32* %l5 := m[%sp+20]
    *32* %l6 := m[%sp+24]
    *32* %l7 := m[%sp+28]
    *32* %i0 := m[%sp+32]
    *32* %i1 := m[%sp+36]
    *32* %i2 := m[%sp+40]
    *32* %i3 := m[%sp+44]
    *32* %i4 := m[%sp+48]
    *32* %i5 := m[%sp+52]
    *32* %i6 := m[%sp+56]
    *32* %i7 := m[%sp+60]
    *32* rd := tmp # repeat
};

INSTRUCTION "RESTORE" () {
    *32* tmp := 0
    *32* %o0 := %i0
    *32* %o1 := %i1
    *32* %o2 := %i2
    *32* %o3 := %i3
    *32* %o4 := %i4
    *32* %o5 := %i5
    *32* %o6 := %i6
    *32* %o7 := %i7
    *32* %g0 := tmp
    *32* %l0 := m[%sp+0]
    *32* %l1 := m[%sp+4]
    *32* %l2 := m[%sp+8]
    *32* %l3 := m[%sp+12]
    *32* %l4 := m[%sp+16]
    *32* %l5 := m[%sp+20]
    *32* %l6 := m[%sp+24]
    *32* %l7 := m[%sp+28]
    *32* %i0 := m[%sp+32]
    *32* %i1 := m[%sp+36]
    *32* %i2 := m[%sp+40]
    *32* %i3 := m[%sp+44]
    *32* %i4 := m[%sp+48]
    *32* %i5 := m[%sp+52]
    *32* %i6 := m[%sp+56]
    *32* %i7 := m[%sp+60]
    *32* %g0 := tmp
};

INSTRUCTION "RETURN" (addr) {
    *32* %o0 := %i0
    *32* %o1 := %i1
    *32* %o2 := %i2
    *32* %o3 := %i3
    *32* %o4 := %i4
    *32* %o5 := %i5
    *32* %o6 := %i6
    *32* %o7 := %i7
    *32* %l0 := m[%sp+0]
    *32* %l1 := m[%sp+4]
    *32* %l2 := m[%sp+8]
    *32* %l3 := m[%sp+12]
    *32* %l4 := m[%sp+16]
    *32* %l5 := m[%sp+20]
    *32* %l6 := m[%sp+24]
    *32* %l7 := m[%sp+28]
    *32* %i0 := m[%sp+32]
    *32* %i1 := m[%sp+36]
    *32* %i2 := m[%sp+40]
    *32* %i3 := m[%sp+44]
    *32* %i4 := m[%sp+48]
    *32* %i5 := m[%sp+52]
    *32* %i6 := m[%sp+56]
    *32* %i7 := m[%sp+60]
};

INSTRUCTION "RET"  () { ret };
INSTRUCTION "RETT" () { ret };
INSTRUCTION "RETL" () { ret };

# Jump instructions - hard-coded semantics
INSTRUCTION "BA"      (reloc)      { goto reloc };
INSTRUCTION "BA"      (cc, reloc)  { goto reloc };
INSTRUCTION "BAA"     (reloc)      { goto reloc };
INSTRUCTION "BAA"     (cc, reloc)  { goto reloc };
INSTRUCTION "BN"      (cc, reloc)  { goto reloc };
INSTRUCTION "BN"      (reloc)      { goto reloc };
INSTRUCTION "BNA"     (reloc)      { goto reloc };
INSTRUCTION "BNA"     (cc, reloc)  { goto reloc };

# Conditional branches - those suffixed with 'A' have their delay slots anulled when not taken.
INSTRUCTION "BNE"     (reloc)      { _ };
INSTRUCTION "BNE"     (cc, reloc)  { _ };
INSTRUCTION "BNEA"    (reloc)      { _ };
INSTRUCTION "BNEA"    (cc, reloc)  { _ };
INSTRUCTION "BE"      (reloc)      { _ };
INSTRUCTION "BE"      (cc, reloc)  { _ };
INSTRUCTION "BEA"     (reloc)      { _ };
INSTRUCTION "BEA"     (cc, reloc)  { _ };
INSTRUCTION "BG"      (reloc)      { _ };
INSTRUCTION "BG"      (cc, reloc)  { _ };
INSTRUCTION "BGA"     (reloc)      { _ };
INSTRUCTION "BGA"     (cc, reloc)  { _ };
INSTRUCTION "BLE"     (reloc)      { _ };
INSTRUCTION "BLE"     (cc, reloc)  { _ };
INSTRUCTION "BLEA"    (reloc)      { _ };
INSTRUCTION "BLEA"    (cc, reloc)  { _ };
INSTRUCTION "BGE"     (reloc)      { _ };
INSTRUCTION "BGE"     (cc, reloc)  { _ };
INSTRUCTION "BGEA"    (reloc)      { _ };
INSTRUCTION "BGEA"    (cc, reloc)  { _ };
INSTRUCTION "BL"      (reloc)      { _ };
INSTRUCTION "BL"      (cc, reloc)  { _ };
INSTRUCTION "BLA"     (reloc)      { _ };
INSTRUCTION "BLA"     (cc, reloc)  { _ };
INSTRUCTION "BGU"     (reloc)      { _ };
INSTRUCTION "BGU"     (cc, reloc)  { _ };
INSTRUCTION "BGUA"    (reloc)      { _ };
INSTRUCTION "BGUA"    (cc, reloc)  { _ };
INSTRUCTION "BLEU"    (reloc)      { _ };
INSTRUCTION "BLEU"    (cc, reloc)  { _ };
INSTRUCTION "BLEUA"   (reloc)      { _ };
INSTRUCTION "BLEUA"   (cc, reloc)  { _ };
INSTRUCTION "BCC"     (reloc)      { _ };
INSTRUCTION "BCC"     (cc, reloc)  { _ };
INSTRUCTION "BCCA"    (reloc)      { _ };
INSTRUCTION "BCCA"    (cc, reloc)  { _ };
INSTRUCTION "BCS"     (reloc)      { _ };
INSTRUCTION "BCS"     (cc, reloc)  { _ };
INSTRUCTION "BCSA"    (reloc)      { _ };
INSTRUCTION "BCSA"    (cc, reloc)  { _ };
INSTRUCTION "BPOS"    (reloc)      { _ };
INSTRUCTION "BPOS"    (cc, reloc)  { _ };
INSTRUCTION "BPOSA"   (reloc)      { _ };
INSTRUCTION "BPOSA"   (cc, reloc)  { _ };
INSTRUCTION "BNEG"    (reloc)      { _ };
INSTRUCTION "BNEG"    (cc, reloc)  { _ };
INSTRUCTION "BNEGA"   (reloc)      { _ };
INSTRUCTION "BNEGA"   (cc, reloc)  { _ };
INSTRUCTION "BVC"     (reloc)      { _ };
INSTRUCTION "BVC"     (cc, reloc)  { _ };
INSTRUCTION "BVCA"    (reloc)      { _ };
INSTRUCTION "BVCA"    (cc, reloc)  { _ };
INSTRUCTION "BVS"     (reloc)      { _ };
INSTRUCTION "BVS"     (cc, reloc)  { _ };
INSTRUCTION "BVSA"    (reloc)      { _ };
INSTRUCTION "BVSA"    (cc, reloc)  { _ };


# Call instruction - always executes delay instruction
INSTRUCTION "CALL"    (dest)       { _ };

# Jump and Link instruction - always executes delay instruction
# Register indirect transfer of control
# Note: eaddr and rd could be the same register (e.g. jmpl %o7, %o7)
INSTRUCTION "JMPL"    (eaddr, rd)  { _ };
INSTRUCTION "JMP"     (dest)       { _ };

# Read and Write State Register Instructions
INSTRUCTION "RD" (src, dest)    { *32* dest := src };
INSTRUCTION "WR" (rs1, rs2, rd) { *32* rd := rs1 ^ rs2 };


## Float Instructions
# NB all instructions assume that we have registers up to 128 bits and that
# the 4 sparc registers used as such are automagically determined.
# FMOVs is used to move the word content of a floating point register to a
# destination floating point register.
# NB: This means that 2 FMOVs statements are required to move a double and
# 4 to move a quad.
INSTRUCTION "FMOVs" (fs2s, fds) { *32* fds := fs2s };
INSTRUCTION "FNEGs" (fs2s, fds) { *32* fds := 0.0 -f fs2s };
INSTRUCTION "FABSs" (fs2s, fds) { *32* fds := [ fs2s < 0.0 ? 0.0 -f fs2s : fs2s ] };

# Shamelessly borrowed from integers
INSTRUCTION "FADDs" (fs1, fs2, fd)  { *32*  fd := fs1 +f fs2 };
INSTRUCTION "FSUBs" (fs1, fs2, fd)  { *32*  fd := fs1 -f fs2 };
INSTRUCTION "FDIVs" (fs1, fs2, fd)  { *32*  fd := fs1 /f fs2 };
INSTRUCTION "FMULs" (fs1, fs2, fd)  { *32*  fd := fs1 *f fs2 };

INSTRUCTION "FADDd"  (fs1, fs2, fd) { *64*  fd := fs1 +f fs2 };
INSTRUCTION "FSUBd"  (fs1, fs2, fd) { *64*  fd := fs1 -f fs2 };
INSTRUCTION "FDIVd"  (fs1, fs2, fd) { *64*  fd := fs1 /f fs2 };
INSTRUCTION "FMULd"  (fs1, fs2, fd) { *64*  fd := fs1 *f fs2 };
INSTRUCTION "FsMULd" (fs1, fs2, fd) { *64*  fd := fs1 *f fs2 };

INSTRUCTION "FADDq"  (fs1, fs2, fd) { *128* fd := fs1 +f fs2 };
INSTRUCTION "FSUBq"  (fs1, fs2, fd) { *128* fd := fs1 -f fs2 };
INSTRUCTION "FDIVQ"  (fs1, fs2, fd) { *128* fd := fs1 /f fs2 };
INSTRUCTION "FMULq"  (fs1, fs2, fd) { *128* fd := fs1 *f fs2 };
INSTRUCTION "FdMULq" (fs1, fs2, fd) { *128* fd := fs1 *f fs2 };


# FSQRTx_ assumes that SQRT can operate on a register of any size
INSTRUCTION "FSQRTs" (fs2s, fds) { *32*  fds := sqrt(fs2s) };
INSTRUCTION "FSQRTd" (fs2d, fdd) { *64*  fdd := sqrt(fs2d) };
INSTRUCTION "FSQRTq" (fs2q, fdq) { *128* fdq := sqrt(fs2q) };


# FiTOf etc are no longer their own unique unary operators
INSTRUCTION "FiTOs"      (fs2s, fds)  {  *32* fds := itof( 32,  32,  fs2s) };
INSTRUCTION "FiTOd"      (fs2s, fdd)  {  *64* fdd := itof( 32,  64,  fs2s) };
INSTRUCTION "FiTOq"      (fs2s, fdq)  { *128* fdq := itof( 32, 128, fs2s) };

INSTRUCTION "FsTOi"      (fs2s, fds)  {  *32* fds := ftoi( 32,  32, fs2s) };
INSTRUCTION "FdTOi"      (fs2d, fds)  {  *32* fds := ftoi( 64,  32, fs2d) };
INSTRUCTION "FqTOi"      (fs2q, fds)  {  *32* fds := ftoi(128,  32, fs2q) };

INSTRUCTION "FdTOs"      (fs2d,  fds) {  *32* fds := fsize( 64,  32, fs2d) };
INSTRUCTION "FqTOs"      (fs2q,  fds) {  *32* fds := fsize(128,  32, fs2q) };

INSTRUCTION "FsTOd"      (fs2s, fdd)  {  *64* fdd := fsize( 32,  64, fs2s) };
INSTRUCTION "FqTOd"      (fs2q, fdd)  {  *64* fdd := fsize(128,  64, fs2q) };

INSTRUCTION "FsTOq"      (fs2s, fdq)  { *128* fdq := fsize( 32, 128, fs2s) };
INSTRUCTION "FdTOq"      (fs2d, fdq)  { *128* fdq := fsize( 64, 128, fs2d) };


#FCMPx
# Since we are only concerned with the result value being 0, >0 or <0
# NB these comparisons set the flag registers. They do NOT result in a
# jump in themselves.

FCOMPS := { "FCMPs", "FCMPEs" };
FCOMPD := { "FCMPd", "FCMPEd" };
FCOMPQ := { "FCMPq", "FCMPEq" };

INSTRUCTION FCOMPS[idx] (fs1s, fs2s) {
    *32* tmpf := fs1s -f fs2s
    SETFFLAGS(fs1s, fs2s)
};

INSTRUCTION FCOMPD[idx] (fs1d, fs2d) {
    *64* tmpd := fs1d -f fs2d
    SETFFLAGS(fs1d, fs2d)
};

INSTRUCTION FCOMPQ[idx] (fs1q, fs2q) {
    *128* tmpD := fs1q -f fs2q
    SETFFLAGS(fs1q, fs2q)
};


# More generalised form based loosely on the 8086 architecture.
# A different "variable" for each of the following conditions:
# - Zero(%FZF),
# - Greater than zero(%FG),
# - Less than Zero(%FL).
# The concept of orderedness has been removed but can still be accessed.
# If a result %FZF=0 and %FGF=0 and %FLF=0 then it must be an unordered result.
#  %FGF is 1 iff the fcc field of the FSR = 2
#  %FLF is 1 iff the fcc field of the FSR = 1
#  %FZF is 1 iff the fcc field of the FSR = 0
# operators exist and have been setup correctly as at 14/12/1998

INSTRUCTION "FBA"     (reloc) { goto reloc };
INSTRUCTION "FBN"     (reloc) { goto reloc };
INSTRUCTION "FBNE"    (reloc) { *32*%pc := %npc     *32* %npc := [ ~%FZF                 ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBE"     (reloc) { *32*%pc := %npc     *32* %npc := [ %FZF                  ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBG"     (reloc) { *32*%pc := %npc     *32* %npc := [ %FGF                  ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBLE"    (reloc) { *32*%pc := %npc     *32* %npc := [ (%FZF | %FLF)         ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBUE"    (reloc) { *32*%pc := %npc     *32* %npc := [ ~(%FGF | %FLF)        ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBUL"    (reloc) { *32*%pc := %npc     *32* %npc := [ ~(%FZF | %FGF)        ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBGE"    (reloc) { *32*%pc := %npc     *32* %npc := [ (%FGF | %FZF)         ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBL"     (reloc) { *32*%pc := %npc     *32* %npc := [ %FLF                  ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBLG"    (reloc) { *32*%pc := %npc     *32* %npc := [ (%FGF | %FLF)         ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBUG"    (reloc) { *32*%pc := %npc     *32* %npc := [ ~(%FZF | %FLF)        ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBULE"   (reloc) { *32*%pc := %npc     *32* %npc := [ ~%FGF                 ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBUGE"   (reloc) { *32*%pc := %npc     *32* %npc := [ ~%FLF                 ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBU"     (reloc) { *32*%pc := %npc     *32* %npc := [ ~(%FZF | %FGF | %FLF) ? reloc : %npc+4 ]      *1* %CTI := 1 };
INSTRUCTION "FBO"     (reloc) { *32*%pc := %npc     *32* %npc := [ (%FZF | %FGF | %FLF)  ? reloc : %npc+4 ]      *1* %CTI := 1 };


# Anullable FP branches
INSTRUCTION "FBAA"    (reloc) { goto reloc };
INSTRUCTION "FBNA"    (reloc) { goto reloc };

INSTRUCTION "FBNEA"   (reloc) { *32* %pc := [ ~%FZF                 ? %npc : %npc+4 ]   *32* %npc := [ ~%FZF                  ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBEA"    (reloc) { *32* %pc := [ %FZF                  ? %npc : %npc+4 ]   *32* %npc := [ %FZF                   ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBGA"    (reloc) { *32* %pc := [ %FGF                  ? %npc : %npc+4 ]   *32* %npc := [ %FGF                   ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBLEA"   (reloc) { *32* %pc := [ (%FZF | %FLF)         ? %npc : %npc+4 ]   *32* %npc := [ (%FZF | %FLF)          ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBUEA"   (reloc) { *32* %pc := [ ~(%FGF | %FLF)        ? %npc : %npc+4 ]   *32* %npc := [ ~(%FGF | %FLF)         ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBULA"   (reloc) { *32* %pc := [ ~(%FZF | %FGF)        ? %npc : %npc+4 ]   *32* %npc := [ ~(%FZF | %FGF)         ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBGEA"   (reloc) { *32* %pc := [ (%FGF | %FZF)         ? %npc : %npc+4 ]   *32* %npc := [ (%FGF | %FZF)          ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBLA"    (reloc) { *32* %pc := [ %FLF                  ? %npc : %npc+4 ]   *32* %npc := [ %FLF                   ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBLGA"   (reloc) { *32* %pc := [ (%FGF | %FLF)         ? %npc : %npc+4 ]   *32* %npc := [ (%FGF | %FLF)          ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBUGA"   (reloc) { *32* %pc := [  ~(%FZF | %FLF)       ? %npc : %npc+4 ]   *32* %npc := [ ~(%FZF | %FLF)         ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBULEA"  (reloc) { *32* %pc := [ ~%FGF                 ? %npc : %npc+4 ]   *32* %npc := [ ~%FGF                  ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBUGEA"  (reloc) { *32* %pc := [ ~%FLF                 ? %npc : %npc+4 ]   *32* %npc := [ ~%FLF                  ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBUA"    (reloc) { *32* %pc := [ ~(%FZF | %FGF | %FLF) ? %npc : %npc+4 ]   *32* %npc := [ ~(%FZF | %FGF | %FLF)  ? reloc : %npc+8 ]    *1* %CTI := 1 };
INSTRUCTION "FBOA"    (reloc) { *32* %pc := [ (%FZF | %FGF | %FLF)  ? %npc : %npc+4 ]   *32* %npc := [ (%FZF | %FGF | %FLF)   ? reloc : %npc+8 ]    *1* %CTI := 1 };


# Loading and storing Floating point registers.
INSTRUCTION "LDFSR"  (eaddr) { *32* %FSR := m[eaddr] };

INSTRUCTION "LDF"  (src, fds) { *32* fds := src };
INSTRUCTION "LDDF" (src, fdd) { *64* fdd := src };

# Store double instruction- the 1st reg. of double op. must be even
# the 2nd reg. of double op. must be the next reg. after 1st, hence odd
INSTRUCTION "STFSR" (dest)      { *32* dest := %FSR };
INSTRUCTION "STF"   (fds, dest) { *32* dest := fds  };
INSTRUCTION "STDF"  (fdd, dest) { *64* dest := fdd  };

INSTRUCTION "UNIMP" (val)  { _ };
